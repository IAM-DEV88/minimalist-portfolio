---
import { projects } from "@cv";
import { basics } from "@cv";
import Mail from "@/icons/Mail.astro";
import Phone from "@/icons/Phone.astro";
import GitHub from "@/icons/GitHub.astro";
import LinkedIn from "@/icons/LinkedIn.astro";
import Facebook from "@/icons/Facebook.astro";
import Youtube from "@/icons/Youtube.astro";
import TikTok from "@/icons/TikTok.astro";
import Twitch from "@/icons/Twitch.astro";
const { name, profiles, phone, email } = basics;
const SOCIAL_ICONS: Record<string, any> = {
  GitHub,
  LinkedIn,
  Twitch,
  Youtube,
  TikTok,
  Facebook,
};

const highlightCounts = projects.reduce((acc: Record<string, number>, project) => {
  project.highlights.forEach((highlight) => {
    acc[highlight] = (acc[highlight] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);


const initialProjects = projects.slice(0, 5);
---

<h4 class="mt-6 mb-5 text-md-font uppercase font-bold md:text-md-font-sm">proyectos</h4>

<div id="project-list" class="flex flex-col items-center">
  <!-- Input de búsqueda -->
  <input
    id="search-input"
    list="projectNames"
    placeholder="Buscar..."
    class="bg-theme drop-shadow-enphasis rounded px-4 py-1 mb-2 w-[60%]"
  />
  <datalist id="projectNames">
    {projects.map((project) => <option value={project.name} />)}
  </datalist>

  <!-- Lista de proyectos -->
  <ul
    id="project-list-items"
    class="my-3 gap-y-2 flex flex-col w-[90%]"
  >
    {initialProjects.map((project) => <li>{project.name}</li>)}
  </ul>

  <!-- Controles de paginación -->
  <div id="pagination-controls text-md-font" class="flex flex-row gap-2">
    <button id="prev-page" class="rounded bg-gray-800 w-6 h-6">&lt;</button>
    <span id="page-info"></span>
    <button id="next-page" class="rounded bg-gray-800 w-6 h-6">&gt;</button>
  </div>

  <!-- Panel de filtros -->
  <h5 class="text-md-font uppercase font-bold my-3">TIPO</h5>
  <div class="text-md-font flex flex-wrap justify-between gap-x-2">
    {
      Object.entries(highlightCounts).map(([highlight, count]) => (
        <label class="cursor-pointer">
          <input type="checkbox" value={highlight} class="filter-checkbox" />
          {highlight} ({count})
        </label>
      ))
    }
  </div>

  <!-- Modal -->
  <div id="project-modal" class="modal pt-[11vh]">
    <div class="modal-content rounded bg-theme drop-shadow-theme w-[90%]">
      <span class="close absolute right-6 top-0">&times;</span>
      <div class="flex flex-col gap-y-2">
        <h2 id="modal-project-name" class="font-bold"></h2>
        <figure id="modal-project-img"></figure>
        <p id="modal-project-description" class="text-md-font"></p>
        <span id="modal-project-link" class="text-md-font self-center py-2"></span>
        <h3 class="text-md-font font-medium">TIPO:</h3>
        <ul id="modal-project-highlights" class="text-sm-font flex flex-wrap gap-2"></ul>
        <footer class="no-print flex flex-row justify-center">
          {
            email && (
              <a
                href={`mailto:${email}`}
                title={`Enviar correo electronico a ${name} al correo ${email}`}
                target="_blank"
                rel="noopener noreferrer"
              >
                <Mail />
              </a>
            )
          }
          {
            phone && (
              <a
                href={`tel:${phone}`}
                title={`Llamar a ${name} al telefono ${phone}`}
                target="_blank"
                rel="noopener noreferrer"
              >
                <Phone />
              </a>
            )
          }
          {
            profiles.map(({ network, url, username }) => {
              const Icon = SOCIAL_ICONS[username];
              return (
                <a
                  href={`${url}`}
                  title={`Mirar perfil de ${username}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <Icon />
                </a>
              );
            })
          }
        </footer>
      </div>
    </div>
  </div>
</div>

<style>
  footer a {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 4px;
    height: 32px;
    width: 32px;
    border-radius: 5px;
  }
  .modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
    /* transition: opacity .3s ease-in-out, display .3s ease allow-discrete; */
  }
  
  /* .modal-content{
    transition: opacity .3s ease-in-out, display .3s ease allow-discrete;
    opacity:0;
  }

  .modal[style*="display: block"] > .modal-content {
    opacity:1;
    transition: opacity .3s ease-in-out;

    @starting-style{
      opacity:0;
    }
  } */

  .modal-content {
    margin: 0 auto;
    padding: 20px;
    border: 1px solid #888;
    width: 90%;
    max-width: 600px;
  }

  .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }

  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }
</style>

<script define:vars={{ projects }} is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    let searchQuery = "";
    let selectedFilters = [];
    let currentPage = 1;
    const itemsPerPage = 5;
  
    const searchInput = document.getElementById("search-input");
    const filterCheckboxes = document.querySelectorAll(".filter-checkbox");
    const projectListItems = document.getElementById("project-list-items");
    const prevPageButton = document.getElementById("prev-page");
    const nextPageButton = document.getElementById("next-page");
    const pageInfo = document.getElementById("page-info");
    const modal = document.getElementById("project-modal");
    const closeModal = document.querySelector(".close");
  
    function getFilteredProjects() {
      return projects.filter((project) => {
        const matchesSearch = project.name
          .toLowerCase()
          .includes(searchQuery.toLowerCase());
        const matchesFilters =
          selectedFilters.length === 0 ||
          selectedFilters.some((filter) => project.highlights.includes(filter));
        return matchesSearch && matchesFilters;
      });
    }
  
    function updateProjectList() {
      const filteredProjects = getFilteredProjects();
      const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);
  
      if (currentPage > totalPages) {
        currentPage = totalPages || 1;
      }
  
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = startIndex + itemsPerPage;
      const projectsToShow = filteredProjects.slice(startIndex, endIndex);
  
      projectListItems.innerHTML = projectsToShow
        .map(
          (project, index) =>
            `<li class='cursor-pointer hover:pl-2 hover:bg-enphasis py-1 border-b-2 border-secondary transition-all' data-project-name="${project.name}">
              ${startIndex + index + 1}. ${project.name}
            </li>`
        )
        .join("");
  
      pageInfo.innerHTML = `<span class='text-md-font'>Página ${currentPage} de ${totalPages}</span>`;
      prevPageButton.disabled = currentPage === 1;
      nextPageButton.disabled = currentPage === totalPages;
  
      projectListItems.querySelectorAll("li").forEach((li) => {
        li.addEventListener("click", handleProjectClick);
      });
    }
  
    function handleSearchChange() {
      searchQuery = searchInput.value;
      currentPage = 1;
      updateProjectList();
    }
  
    function handleFilterChange(event) {
      const filter = event.target.value;
      if (event.target.checked) {
        selectedFilters.push(filter);
      } else {
        selectedFilters = selectedFilters.filter((f) => f !== filter);
      }
      currentPage = 1;
      updateProjectList();
    }
  
    function handlePrevPage() {
      if (currentPage > 1) {
        currentPage--;
        updateProjectList();
      }
    }
  
    function handleNextPage() {
      const filteredProjects = getFilteredProjects();
      const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        updateProjectList();
      }
    }
  
    function handleProjectClick(event) {
      const projectName = event.target.dataset.projectName;
      const project = projects.find((p) => p.name === projectName);
      if (project) {
        document.getElementById("modal-project-name").textContent = project.name;
        document.getElementById("modal-project-img").innerHTML = 
  `<img src="/gallery/project/${project.image}" alt="${project.name}" class="rounded w-[50%] m-auto" />`;

        document.getElementById("modal-project-description").textContent = project.description;
        document.getElementById("modal-project-link").innerHTML = 
          `<a target="_blank" href="${project.url}" title="${project.name}" class="px-2 py-1 items-center border-2 rounded border-primary uppercase">Visitar</a>`;
        document.getElementById("modal-project-highlights").innerHTML = 
          project.highlights.map((highlight) => `<li>${highlight}</li>`).join("");
        modal.style.display = "block";
      }
    }
  
    function handleCloseModal() {
      modal.style.display = "none";
    }
  
    searchInput.addEventListener("input", handleSearchChange);
    filterCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", handleFilterChange);
    });
    prevPageButton.addEventListener("click", handlePrevPage);
    nextPageButton.addEventListener("click", handleNextPage);
    closeModal.addEventListener("click", handleCloseModal);
  
    window.addEventListener("click", (event) => {
      if (event.target === modal) {
        modal.style.display = "none";
      }
    });
  
    updateProjectList();
  });
  </script>
  
